Integration tests
=================

    >>> app = layer['app']
    >>> portal = layer['portal']
    >>> from Products.PloneFormGen.tests.pfgtc import MailHostMock
    >>> portal.MailHost = MailHostMock()
    >>> portal_url = portal.portal_url()
    >>> request = layer['request']
    >>> from plone.testing.z2 import Browser
    >>> browser = Browser(app)

Login to the portal:

    >>> from plone.app.testing import setRoles
    >>> from plone.app.testing import login
    >>> from plone.app.testing import TEST_USER_NAME
    >>> from plone.app.testing import TEST_USER_PASSWORD
    >>> from plone.app.testing import TEST_USER_ID
    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
    >>> login(portal, TEST_USER_NAME)
    >>> import transaction
    >>> transaction.commit()
    >>> browser.open(portal_url + '/login_form')
    >>> browser.getControl(name='__ac_name').value = TEST_USER_NAME
    >>> browser.getControl(name='__ac_password').value = TEST_USER_PASSWORD
    >>> browser.getControl(name='submit').click()


Standalone form
---------------

Add a new Form Folder::

    >>> browser.open(portal_url)
    >>> browser.getLink('Form Folder').click()
    >>> browser.getControl('Title').value = 'testform'
    >>> browser.getControl('Save').click()

We'll want to test the save data adapter later.
Let's add one now::

    >>> browser.open(portal_url + '/testform')
    >>> browser.getLink('Save Data Adapter').click()
    >>> browser.getControl('Title').value = 'saver'
    >>> browser.getControl('Save').click()
    >>> browser.open(portal_url + '/testform/saver')
    >>> browser.url
    '.../testform/saver'

Return to form and confirm that it renders properly::

    >>> browser.open(portal_url + '/testform')
    >>> browser.url
    '.../testform'
    >>> print browser.contents
    <!DOCTYPE...
    ...
     <div class="pfg-form formid-testform">
      <form ...action=".../testform"...>
          ...
          <input...name="replyto".../>
          ...
          <input...name="topic".../>
          ...
          <textarea...name="comments"...></textarea>
          ...
          <div class="formControls">
            ...
            <input type="hidden" name="form.submitted"
                   value="1" />
            ...
            <input class="context" type="submit"
                   name="form_submit" value="Submit" />
          </div>
      </form>
    </div>
    ...

Submit the form.  An incomplete submission should give validation errors::

    >>> portal.testform.mailer.setRecipient_email('mdummy@address.com')
    >>> transaction.commit()
    >>> browser.getControl('Your E-Mail Address').value = 'test@example.com'
    >>> browser.getControl('Subject').value = 'test'
    >>> browser.getControl('Submit').click()
    >>> browser.url
    '.../testform'
    >>> 'Please correct the indicated errors.' in browser.contents
    True

Now let's try a complete submission and confirm that it displays the default
thank you page.  The default form has a mailer, so we'll programmatically set
a recipient so that it doesn't complain.  (The mailer is mocked in the doctest
base class)::

    >>> browser.getControl('Comments').value = 'PFG rocks!'
    >>> browser.getControl('Submit').click()
    <sent mail from ...to ['mdummy@address.com']>
    >>> browser.url
    '.../plone/testform'
    >>> 'Thanks for your input.' in browser.contents
    True

We should be able to view an individual field::

    >>> browser.open(portal_url + '/testform/comments')
    >>> browser.url
    '.../plone/testform/comments'

    >>> print browser.contents
    <!DOCTYPE...
    ...
     <div class="pfg-form formid-comments">
          ...
          <textarea...name="comments"...></textarea>
          ...
          <div class="formControls">
            ...
            <input type="hidden" name="form.submitted"
                   value="1" />
            ...
            <input class="context" type="submit"
                   name="form_submit" value="Submit" />
          </div>
      </form>
    </div>
    ...

Let's take a look at the save-data adapter::

    >>> browser.open(portal_url + '/testform/saver')
    >>> browser.url
    '.../plone/testform/saver'

It ought to tell us we have a saved input::

    >>> print browser.contents
    <!DOCTYPE...
    ...
    ...<span>1</span> input(s) saved...
    ...

And a form offering to clear input::

    >>> print browser.contents
    <!DOCTYPE...
    ...
    <form action=".../testform/saver/clearSavedFormInput" method="post"...>
        <input type="hidden" name="_authenticator" value="...
        <input type="submit" ... value="Clear Saved Input" ...
          ...Clear all saved input?...
    </form>
    ...

    Let's try it out; we should redirect back to form::

    >>> browser.getControl('Clear Saved Input').click()
    >>> browser.url
    '.../testform/saver'

Attempts to use clearSavedFormInput without auth should be forbidden::

    >>> browser.open(portal_url + '/testform/saver/clearSavedFormInput')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 403: Forbidden


Attempts to use gpg_services TTW should be fruitless::

    >>> browser.open(portal_url + '/testform/@@gpg_services/encrypt?data=XXX&recipient_key_id=yyy')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

Attempts to read the success action TTW should be fruitless::

    >>> browser.open(portal_url + '/testform/fgGetSuccessAction')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

That should also be true for fields::

    >>> browser.open(portal_url + '/testform/comments/fgGetSuccessAction')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

Attempts to set mailer body TTW should fail
    >>> browser.open(portal_url + '/testform/mailer/setBody_pt?value=stuff')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

Attempts to read mailer body TTW should fail
    >>> browser.open(portal_url + '/testform/mailer/body_pt')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

We want to test security on the custom script adapter. Let's add one::

    >>> browser.open(portal_url + '/testform')
    >>> browser.getLink('Custom Script Adapter').click()
    >>> browser.getControl('Title').value = 'Test Script Adapter'
    >>> browser.getControl('Save').click()
    >>> browser.open(portal_url + '/testform/test-script-adapter')
    >>> browser.url
    '.../testform/test-script-adapter'

Attempts to set script body TTW should fail::

    >>> browser.open(portal_url + '/testform/test-script-adapter/updateScript?body=raise%2010&role=none')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

Attempts to run the script TTW should fail::

    >>> browser.open(portal_url + '/testform/test-script-adapter/onSuccess?fields=')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

    >>> browser.open(portal_url + '/testform/test-script-adapter/scriptBody?fields=')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

    >>> browser.open(portal_url + '/testform/test-script-adapter/executeCustomScript?fields=&form=&req=')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

Attempts to use onSuccess TTW should fail::

    >>> browser.open(portal_url + '/testform/saver/onSuccess?fields=&request=')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

Attempts to read our special member attributes TTW should fail::

    >>> browser.open(portal_url + '/testform/memberId')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

    >>> browser.open(portal_url + '/testform/memberFullName')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found

    >>> browser.open(portal_url + '/testform/memberEmail')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found


# Embedded form
# -------------
#
# Now let's make sure PloneFormGen forms work properly when embedded in some other
# context.  First let's load some test-only ZCML which registers a @@form-wrapper
# view that will render the form we created above::
#
#     >>> from Products.Five import zcml
#     >>> import Products.PloneFormGen
#     >>> zcml.load_config('tests/fixtures/tests.zcml', Products.PloneFormGen)
#
# Now we should be able to render the same form as above, but located at @@form-wrapper::
#
#     >>> browser.open(portal_url + '/@@form-wrapper')
#     >>> print browser.contents
#     <!DOCTYPE...
#     ...
#     <div class="pfg-embedded">
#         ...
#         <form...action="http://nohost/plone/@@form-wrapper"...>
#         ...
#         </form>
#         ...
#     </div>
#     ...
#
# If we submit an incomplete form, it should get validated in-place and render with error
# messages::
#
#     >>> browser.getControl('Submit').click()
#     >>> browser.url
#     'http://nohost/plone/@@form-wrapper'
#     >>> 'This field is required.' in browser.contents
#     True
#
# If we successfully complete the form, we should get pseudo-redirected to the thank you page::
#
#     >>> browser.getControl('Your E-Mail Address').value = 'test@example.com'
#     >>> browser.getControl('Subject').value = 'test'
#     >>> browser.getControl('Comments').value = 'Now with double the rockage...'
#     >>> browser.getControl('Submit').click()
#     <sent mail from ...to ['mdummy@address.com']>
#     >>> browser.url
#     'http://nohost/plone/@@form-wrapper'
#     >>> 'Thanks for your input.' in browser.contents
#     True
#
# Make sure that the thank you page was rendered standalone, rather than embedded in the
# wrapping template::
#
#     >>> 'Embedded form' in browser.contents
#     False
#
# We used some trickery to retry the request with a new URL without doing a real redirect,
# in order to preserve the request variables.  So let's make sure they made it::
#
#     >>> 'Now with double the rockage' in browser.contents
#     True
