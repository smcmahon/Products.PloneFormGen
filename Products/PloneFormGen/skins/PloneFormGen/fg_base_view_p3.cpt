<tal:def define="portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
                 fields python:here.fgFields(request);
                 css python:here.getUniqueWidgetAttr(fields, 'helper_css');
                 js python:here.getUniqueWidgetAttr(fields, 'helper_js');
                 portal portal | context/@@plone_portal_state/portal">

<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

  <metal:head fill-slot="top_slot">
    <tal:block define="edit_template python:'%s_edit' % portal_type;
                       edit_macros python:path('here/%s/macros | nothing' % edit_template);
                       macro edit_macros/topslot | nothing"
                    condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
  </metal:head>

  <metal:javascript_head fill-slot="javascript_head_slot">
    <tal:block define="macro here/archetypes_custom_js/macros/javascript_head | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
    <tal:js condition="js"
            repeat="item js">
      <script type="text/javascript"
              charset="iso-8859-1"
              tal:condition="python:exists('portal/%s' % item)"
              tal:attributes="src string:$portal_url/$item">
      </script>
    </tal:js>

    <tal:block define="macro edit_macros/javascript_head | nothing"
                    condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>

    <tal:expr replace="structure here/getHeaderInjection | nothing" />

  </metal:javascript_head>

  <metal:css fill-slot="style_slot">
    <tal:css condition="css"
             repeat="item css">
      <style type="text/css"
             media="all"
             tal:condition="python:exists('portal/%s' % item)"
             tal:content="structure string:&lt;!-- @import url($portal_url/$item); --&gt;">
      </style>
    </tal:css>
  </metal:css>

  <body>
    <metal:content-core fill-slot="content-core">
      <metal:block define-macro="content-core">
        <tal:def_macro define="errors options/state/getErrors | python:{};
                         schematas nothing;
                         allow_tabbing python:False;
                         fieldsets python:['default'];
                         default_fieldset string:default;
                         fieldset default_fieldset;
                         fields python:here.fgFields(request);
                         portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
                         type_name here/getPortalTypeName|here/archetype_name;
                         base_macros here/fg_edit_macros_p3/macros;
                         edit_template python:'%s_edit' % portal_type;
                         edit_macros python:path('here/%s/macros | nothing' % edit_template);
                         header_macro edit_macros/header | header_macro | base_macros/header;
                         typedescription_macro edit_macros/typedescription | typedescription_macro | base_macros/typedescription;
                         body_macro edit_macros/body | body_macro | base_macros/body;
                         footer_macro edit_macros/footer | footer_macro | base_macros/footer;">
           
            <tal:if tal:condition="here/getFormPrologue | nothing">
              <metal:field use-macro="python:context.widget('formPrologue', mode='view')">
                  Body text
              </metal:field>
            </tal:if>

            <metal:use_body use-macro="body_macro" />
            
            <tal:if tal:condition="here/getFormEpilogue | nothing">
              <metal:field use-macro="python:context.widget('formEpilogue', mode='view')">
                  Body text
              </metal:field>
            </tal:if>

        </tal:def_macro>
      </metal:block>
    </metal:content-core>
  </body>
</html>
</tal:def>
